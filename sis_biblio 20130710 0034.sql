-- Script was generated by Devart dbForge Studio for MySQL, Version 4.50.285.0
-- Script date 10/07/2013 12:34:21 a.m.
-- Server version: 5.1.35-community
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Definition for database sis_biblio
--
DROP DATABASE IF EXISTS sis_biblio;
CREATE DATABASE IF NOT EXISTS sis_biblio
	CHARACTER SET utf8
	COLLATE utf8_general_ci;

-- 
-- Set default database
--
USE sis_biblio;

--
-- Definition for table tbl_accion
--
CREATE TABLE IF NOT EXISTS tbl_accion (
  id_accion TINYINT(4) NOT NULL AUTO_INCREMENT,
  accion VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_accion)
)
ENGINE = INNODB
AUTO_INCREMENT = 7
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_autor_externo
--
CREATE TABLE IF NOT EXISTS tbl_autor_externo (
  id_autor_externo BIGINT(20) NOT NULL AUTO_INCREMENT,
  apellido_paterno VARCHAR(50) NOT NULL,
  apellido_materno VARCHAR(50) DEFAULT NULL,
  nombre VARCHAR(100) DEFAULT NULL,
  origen VARCHAR(70) DEFAULT NULL,
  PRIMARY KEY (id_autor_externo)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_componente
--
CREATE TABLE IF NOT EXISTS tbl_componente (
  id_componente INT(11) NOT NULL AUTO_INCREMENT,
  componente VARCHAR(100) NOT NULL,
  descripcion_componente VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (id_componente)
)
ENGINE = INNODB
AUTO_INCREMENT = 93
AVG_ROW_LENGTH = 2048
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_estado_plan_tesis
--
CREATE TABLE IF NOT EXISTS tbl_estado_plan_tesis (
  id_estado_plan_tesis INT(11) NOT NULL AUTO_INCREMENT,
  estado VARCHAR(30) NOT NULL,
  color VARCHAR(25) NOT NULL,
  active CHAR(1) NOT NULL,
  PRIMARY KEY (id_estado_plan_tesis)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_facultad
--
CREATE TABLE IF NOT EXISTS tbl_facultad (
  id_facultad INT(11) NOT NULL AUTO_INCREMENT,
  codigo_facultad CHAR(2) NOT NULL,
  facultad VARCHAR(200) NOT NULL,
  abreviatura_facultad VARCHAR(255) DEFAULT NULL,
  activo CHAR(1) NOT NULL,
  PRIMARY KEY (id_facultad)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_rol
--
CREATE TABLE IF NOT EXISTS tbl_rol (
  id_rol INT(11) NOT NULL AUTO_INCREMENT,
  rol VARCHAR(50) NOT NULL,
  descripcion VARCHAR(200) DEFAULT NULL,
  PRIMARY KEY (id_rol)
)
ENGINE = INNODB
AUTO_INCREMENT = 68
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_sujeto
--
CREATE TABLE IF NOT EXISTS tbl_sujeto (
  id_sujeto BIGINT(20) NOT NULL AUTO_INCREMENT,
  fecha_registro DATE NOT NULL,
  apellido_paterno VARCHAR(50) NOT NULL,
  apellido_materno VARCHAR(50) DEFAULT NULL,
  primer_nombre VARCHAR(50) NOT NULL,
  segundo_nombre VARCHAR(50) DEFAULT NULL,
  fecha_nacimiento DATE DEFAULT NULL,
  dni VARCHAR(15) DEFAULT NULL,
  direccion VARCHAR(250) DEFAULT NULL,
  estado_civil CHAR(1) DEFAULT NULL,
  sexo CHAR(1) DEFAULT NULL,
  telefono_fijo VARCHAR(15) DEFAULT NULL,
  telefono_movil VARCHAR(15) DEFAULT NULL,
  email_institucional VARCHAR(50) DEFAULT NULL,
  email_personal VARCHAR(50) DEFAULT NULL,
  activo CHAR(1) NOT NULL,
  PRIMARY KEY (id_sujeto)
)
ENGINE = INNODB
AUTO_INCREMENT = 14
AVG_ROW_LENGTH = 1260
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_tematica
--
CREATE TABLE IF NOT EXISTS tbl_tematica (
  id_tematica INT(11) NOT NULL AUTO_INCREMENT,
  tematica VARCHAR(100) NOT NULL,
  descripcion_tematica VARCHAR(100) DEFAULT NULL,
  estado_tematica CHAR(1) NOT NULL,
  PRIMARY KEY (id_tematica)
)
ENGINE = INNODB
AUTO_INCREMENT = 7
AVG_ROW_LENGTH = 2730
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_tipo_autor_interno
--
CREATE TABLE IF NOT EXISTS tbl_tipo_autor_interno (
  id_tipo_autor_interno BIGINT(20) NOT NULL AUTO_INCREMENT,
  tipo_autor_interno VARCHAR(25) NOT NULL,
  descripcion_tipo_autor_interno VARCHAR(250) DEFAULT NULL,
  estado_tipo_autor_interno CHAR(1) NOT NULL,
  PRIMARY KEY (id_tipo_autor_interno)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_tipo_material_bibliografico
--
CREATE TABLE IF NOT EXISTS tbl_tipo_material_bibliografico (
  id_tipo_material_bibliografico TINYINT(4) NOT NULL AUTO_INCREMENT,
  tipo_material_bibliografico VARCHAR(100) NOT NULL,
  descripcion_tipo_material_bibliografico VARCHAR(250) DEFAULT NULL,
  estado_tipo_material_bibliografico CHAR(1) NOT NULL,
  PRIMARY KEY (id_tipo_material_bibliografico)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_componente_accion
--
CREATE TABLE IF NOT EXISTS tbl_componente_accion (
  id_componente_accion INT(11) NOT NULL AUTO_INCREMENT,
  id_accion TINYINT(4) NOT NULL,
  id_componente INT(11) NOT NULL,
  PRIMARY KEY (id_componente_accion),
  INDEX Reftbl_accion29 (id_accion),
  INDEX Reftbl_componente30 (id_componente),
  CONSTRAINT Reftbl_accion29 FOREIGN KEY (id_accion)
    REFERENCES tbl_accion(id_accion),
  CONSTRAINT Reftbl_componente30 FOREIGN KEY (id_componente)
    REFERENCES tbl_componente(id_componente)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 4096
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_docente
--
CREATE TABLE IF NOT EXISTS tbl_docente (
  id_docente BIGINT(20) NOT NULL AUTO_INCREMENT,
  codigo_docente INT(11) NOT NULL,
  codigo_personal CHAR(6) DEFAULT NULL,
  condicion CHAR(1) NOT NULL,
  observacion VARCHAR(250) DEFAULT NULL,
  id_sujeto BIGINT(20) NOT NULL,
  PRIMARY KEY (id_docente),
  INDEX Reftbl_sujeto9 (id_sujeto),
  CONSTRAINT Reftbl_sujeto9 FOREIGN KEY (id_sujeto)
    REFERENCES tbl_sujeto(id_sujeto)
)
ENGINE = INNODB
AUTO_INCREMENT = 7
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_escuela
--
CREATE TABLE IF NOT EXISTS tbl_escuela (
  id_escuela INT(11) NOT NULL AUTO_INCREMENT,
  codigo_escuela CHAR(4) NOT NULL,
  escuela VARCHAR(200) NOT NULL,
  escuela_abreviatura VARCHAR(20) DEFAULT NULL,
  estado CHAR(1) NOT NULL,
  id_facultad INT(11) NOT NULL,
  PRIMARY KEY (id_escuela),
  INDEX Reftbl_facultad7 (id_facultad),
  CONSTRAINT Reftbl_facultad7 FOREIGN KEY (id_facultad)
    REFERENCES tbl_facultad(id_facultad)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_material_bibliografico
--
CREATE TABLE IF NOT EXISTS tbl_material_bibliografico (
  id_material_bibliografico BIGINT(20) NOT NULL AUTO_INCREMENT,
  codigo_material_bibliografico VARCHAR(40) DEFAULT NULL,
  titulo VARCHAR(300) NOT NULL,
  introduccion TEXT DEFAULT NULL,
  objetivo TEXT DEFAULT NULL,
  resumen TEXT DEFAULT NULL,
  conclusion TEXT DEFAULT NULL,
  anio YEAR(4) NOT NULL,
  portada VARCHAR(200) DEFAULT NULL,
  numero_pagina SMALLINT(6) DEFAULT NULL,
  editorial VARCHAR(100) DEFAULT NULL,
  volumen INT(11) DEFAULT NULL,
  tomo VARCHAR(3) DEFAULT NULL,
  contenido VARCHAR(100) DEFAULT NULL,
  id_tipo_material_bibliografico TINYINT(4) NOT NULL,
  id_tematica INT(11) DEFAULT NULL,
  activo CHAR(1) NOT NULL,
  PRIMARY KEY (id_material_bibliografico),
  INDEX Reftbl_tematica15 (id_tematica),
  INDEX Reftbl_tipo_material_bibliografico4 (id_tipo_material_bibliografico),
  CONSTRAINT Reftbl_tematica15 FOREIGN KEY (id_tematica)
    REFERENCES tbl_tematica(id_tematica),
  CONSTRAINT Reftbl_tipo_material_bibliografico4 FOREIGN KEY (id_tipo_material_bibliografico)
    REFERENCES tbl_tipo_material_bibliografico(id_tipo_material_bibliografico)
)
ENGINE = INNODB
AUTO_INCREMENT = 12
AVG_ROW_LENGTH = 1638
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_usuario
--
CREATE TABLE IF NOT EXISTS tbl_usuario (
  id_usuario BIGINT(20) NOT NULL AUTO_INCREMENT,
  usuario VARCHAR(50) NOT NULL,
  contrasenia VARCHAR(100) NOT NULL,
  id_sujeto BIGINT(20) NOT NULL,
  active CHAR(1) NOT NULL,
  PRIMARY KEY (id_usuario),
  INDEX Reftbl_sujeto18 (id_sujeto),
  CONSTRAINT Reftbl_sujeto18 FOREIGN KEY (id_sujeto)
    REFERENCES tbl_sujeto(id_sujeto)
)
ENGINE = INNODB
AUTO_INCREMENT = 69
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_alumno
--
CREATE TABLE IF NOT EXISTS tbl_alumno (
  id_alumno BIGINT(20) NOT NULL AUTO_INCREMENT,
  numero_carnet VARCHAR(20) DEFAULT NULL,
  condicion_alumno TINYINT(4) NOT NULL,
  id_sujeto BIGINT(20) NOT NULL,
  id_escuela INT(11) NOT NULL,
  PRIMARY KEY (id_alumno),
  INDEX Reftbl_escuela10 (id_escuela),
  INDEX Reftbl_sujeto8 (id_sujeto),
  CONSTRAINT Reftbl_escuela10 FOREIGN KEY (id_escuela)
    REFERENCES tbl_escuela(id_escuela),
  CONSTRAINT Reftbl_sujeto8 FOREIGN KEY (id_sujeto)
    REFERENCES tbl_sujeto(id_sujeto)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1638
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_autor_externo_material_bibliografico
--
CREATE TABLE IF NOT EXISTS tbl_autor_externo_material_bibliografico (
  id_autor_externo_material_bibliografico BIGINT(20) NOT NULL AUTO_INCREMENT,
  id_autor_externo BIGINT(20) NOT NULL,
  id_material_bibliografico BIGINT(20) NOT NULL,
  PRIMARY KEY (id_autor_externo_material_bibliografico),
  INDEX Reftbl_autor_externo26 (id_autor_externo),
  INDEX Reftbl_material_biliografico27 (id_material_bibliografico),
  CONSTRAINT Reftbl_autor_externo26 FOREIGN KEY (id_autor_externo)
    REFERENCES tbl_autor_externo(id_autor_externo),
  CONSTRAINT Reftbl_material_biliografico27 FOREIGN KEY (id_material_bibliografico)
    REFERENCES tbl_material_bibliografico(id_material_bibliografico)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_material_bibliografico_docente
--
CREATE TABLE IF NOT EXISTS tbl_material_bibliografico_docente (
  id_material_bibliografico_docente BIGINT(20) NOT NULL AUTO_INCREMENT,
  id_material_bibliografico BIGINT(20) NOT NULL,
  id_docente BIGINT(20) NOT NULL,
  PRIMARY KEY (id_material_bibliografico_docente),
  INDEX FK_docente_material_bibliografico (id_docente),
  INDEX FK_material_bibliografico_docente (id_material_bibliografico),
  CONSTRAINT FK_docente_material_bibliografico FOREIGN KEY (id_docente)
    REFERENCES tbl_docente(id_docente),
  CONSTRAINT FK_material_bibliografico_docente FOREIGN KEY (id_material_bibliografico)
    REFERENCES tbl_material_bibliografico(id_material_bibliografico)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_rol_componente_accion
--
CREATE TABLE IF NOT EXISTS tbl_rol_componente_accion (
  id_rol_componente_accion INT(11) NOT NULL AUTO_INCREMENT,
  id_rol INT(11) NOT NULL,
  id_componente_accion INT(11) NOT NULL,
  PRIMARY KEY (id_rol_componente_accion),
  INDEX Reftbl_componente_accion31 (id_componente_accion),
  INDEX Reftbl_rol22 (id_rol),
  CONSTRAINT Reftbl_componente_accion31 FOREIGN KEY (id_componente_accion)
    REFERENCES tbl_componente_accion(id_componente_accion),
  CONSTRAINT Reftbl_rol22 FOREIGN KEY (id_rol)
    REFERENCES tbl_rol(id_rol)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_usuario_rol
--
CREATE TABLE IF NOT EXISTS tbl_usuario_rol (
  id_usuario_rol INT(11) NOT NULL AUTO_INCREMENT,
  id_rol INT(11) NOT NULL,
  id_usuario BIGINT(20) NOT NULL,
  PRIMARY KEY (id_usuario_rol),
  INDEX Reftbl_rol16 (id_rol),
  INDEX Reftbl_usuario17 (id_usuario),
  CONSTRAINT Reftbl_rol16 FOREIGN KEY (id_rol)
    REFERENCES tbl_rol(id_rol),
  CONSTRAINT Reftbl_usuario17 FOREIGN KEY (id_usuario)
    REFERENCES tbl_usuario(id_usuario)
)
ENGINE = INNODB
AUTO_INCREMENT = 116
AVG_ROW_LENGTH = 3276
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_autor_interno
--
CREATE TABLE IF NOT EXISTS tbl_autor_interno (
  id_autor_interno BIGINT(20) NOT NULL AUTO_INCREMENT,
  id_tipo_autor_interno BIGINT(20) NOT NULL,
  id_alumno BIGINT(20) NOT NULL,
  PRIMARY KEY (id_autor_interno),
  INDEX Reftbl_alumno12 (id_alumno),
  INDEX Reftbl_tipo_autor_interno3 (id_tipo_autor_interno),
  CONSTRAINT Reftbl_alumno12 FOREIGN KEY (id_alumno)
    REFERENCES tbl_alumno(id_alumno),
  CONSTRAINT Reftbl_tipo_autor_interno3 FOREIGN KEY (id_tipo_autor_interno)
    REFERENCES tbl_tipo_autor_interno(id_tipo_autor_interno)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1638
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_plan_tesis
--
CREATE TABLE IF NOT EXISTS tbl_plan_tesis (
  id_plan_tesis BIGINT(20) NOT NULL AUTO_INCREMENT,
  titulo VARCHAR(300) NOT NULL,
  introduccion TEXT DEFAULT NULL,
  objetivo TEXT NOT NULL,
  resumen TEXT DEFAULT NULL,
  conclusion TEXT DEFAULT NULL,
  activo CHAR(1) NOT NULL,
  observacion TEXT DEFAULT NULL,
  correo VARCHAR(50) DEFAULT NULL,
  id_alumno BIGINT(20) NOT NULL,
  id_docente BIGINT(20) NOT NULL,
  id_estado_plan_tesis INT(11) NOT NULL,
  PRIMARY KEY (id_plan_tesis),
  INDEX Reftbl_alumno23 (id_alumno),
  INDEX Reftbl_docente24 (id_docente),
  INDEX Reftbl_estado_plan_tesis32 (id_estado_plan_tesis),
  CONSTRAINT Reftbl_alumno23 FOREIGN KEY (id_alumno)
    REFERENCES tbl_alumno(id_alumno),
  CONSTRAINT Reftbl_docente24 FOREIGN KEY (id_docente)
    REFERENCES tbl_docente(id_docente),
  CONSTRAINT Reftbl_estado_plan_tesis32 FOREIGN KEY (id_estado_plan_tesis)
    REFERENCES tbl_estado_plan_tesis(id_estado_plan_tesis)
)
ENGINE = INNODB
AUTO_INCREMENT = 35
AVG_ROW_LENGTH = 1489
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table tbl_autor_interno_material_bibliografico
--
CREATE TABLE IF NOT EXISTS tbl_autor_interno_material_bibliografico (
  id_autor_interno_material_bibliografico BIGINT(20) NOT NULL AUTO_INCREMENT,
  id_autor_interno BIGINT(20) NOT NULL,
  id_material_bibliografico BIGINT(20) NOT NULL,
  id_docente BIGINT(20) NOT NULL,
  PRIMARY KEY (id_autor_interno_material_bibliografico),
  INDEX FK_tbl_autor_interno_material_bibliografico_tbl_docente (id_docente),
  INDEX Reftbl_autor_interno5 (id_autor_interno),
  INDEX Reftbl_material_biliografico6 (id_material_bibliografico),
  CONSTRAINT FK_tbl_autor_interno_material_bibliografico_tbl_docente FOREIGN KEY (id_docente)
    REFERENCES tbl_docente(id_docente),
  CONSTRAINT Reftbl_autor_interno5 FOREIGN KEY (id_autor_interno)
    REFERENCES tbl_autor_interno(id_autor_interno),
  CONSTRAINT Reftbl_material_biliografico6 FOREIGN KEY (id_material_bibliografico)
    REFERENCES tbl_material_bibliografico(id_material_bibliografico)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1638
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure SPRABMAccion
--
CREATE PROCEDURE SPRABMAccion(IN pIdAbm TINYINT, IN pId_accion TINYINT(4), IN pAccion VARCHAR(10))
BEGIN
IF pIdAbm = 0
      THEN 
        SELECT tb.id_accion, tb.accion FROM tbl_accion tb;
        ELSE
        IF pIdAbm = 1
        THEN
          INSERT INTO tbl_accion(accion) VALUES (pAccion);
         ELSE 
          IF pIdAbm=2
          THEN
            UPDATE tbl_accion set accion=pAccion WHERE id_accion=pId_accion;
            COMMIT;
          ELSE 
          IF pIdAbm = 3
           THEN
            DELETE FROM tbl_accion WHERE id_accion=pId_accion;
            COMMIT;
          END IF;
        END IF;
      END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRABMAutorInterno
--
CREATE PROCEDURE SPRABMAutorInterno(IN pIdAbm TINYINT, IN pIdTipoAutorInterno BIGINT, IN pIdAlumno BIGINT,IN pIdAutorInterno BIGINT)
BEGIN
IF pIdAbm=1 THEN
    INSERT INTO tbl_autor_interno(id_tipo_autor_interno,id_alumno) VALUES (pIdTipoAutorInterno,pIdAlumno);
    ELSE IF pIdAbm = 2 THEN
          UPDATE tbl_autor_interno SET
            id_tipo_autor_interno = pIdTipoAutorInterno
            WHERE id_autor_interno = pIdAutorInterno;
        ELSE IF pIdAbm = 3 THEN 
        DELETE FROM tbl_autor_interno WHERE id_autor_interno=pIdAutorInterno;
       END IF;
    END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRABMComponente
--
CREATE PROCEDURE SPRABMComponente(IN pIdAbm TINYINT, IN pId_componente INT (11), IN pComponente VARCHAR(100), IN pDescripcion_componente VARCHAR(100))
BEGIN
IF pIdAbm = 0
      THEN 
        SELECT tbl.id_componente, tbl.componente, tbl.descripcion_componente FROM tbl_componente tbl;
ELSE
       IF pIdAbm = 1
      THEN
      INSERT INTO tbl_componente(componente,descripcion_componente) VALUES (pComponente,pDescripcion_componente);
      ELSE 
 IF pIdAbm=2
      THEN
      UPDATE tbl_componente set componente=pComponente WHERE id_componente=pId_componente;
      COMMIT;
      ELSE 
 IF pIdAbm = 3
      THEN
      DELETE FROM tbl_componente WHERE id_componente=pId_componente;
      COMMIT;
  END IF;
  END IF;
  END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRABMComponenteAccion
--
CREATE PROCEDURE SPRABMComponenteAccion(IN pIdAbm TINYINT, IN pIdRolComponenteAccion INT, IN pIdRol BIGINT, IN pIdComponenteAccion INT)
BEGIN
 IF pIdAbm=0 THEN
	
	SELECT `tbl_componente_accion`.`id_componente_accion`,`tbl_accion`.`accion`,`tbl_componente`.`componente` FROM tbl_componente_accion
	LEFT JOIN `sis_biblio`.`tbl_accion` ON `tbl_componente_accion`.`id_accion` = `tbl_accion`.`id_accion` 
	LEFT JOIN `sis_biblio`.`tbl_componente` ON `tbl_componente_accion`.`id_componente` = `tbl_componente`.`id_componente` ;

	ELSE
	  IF pIdAbm=1 THEN
		INSERT INTO tbl_rol_componente_accion(id_rol_componente_accion,id_rol,id_componente_accion) values (pIdRolComponenteAccion,pIdRol,pIdComponenteAccion);
	    ELSE
		  IF pIdAbm=2 THEN
			DELETE FROM tbl_rol_componente_accion WHERE id_rol_componente_accion in (pIdRolComponenteAccion);
		  END IF;
	    END IF;
	  END IF;

END
$$

--
-- Definition for procedure SPRABMRol
--
CREATE PROCEDURE SPRABMRol(IN pIdAbm TINYINT, IN pIdRol INT,IN pRol VARCHAR(50), IN pDescripcion VARCHAR(200))
BEGIN
 IF pIdAbm = 0
      THEN 
        SELECT tbl.id_rol, tbl.rol FROM tbl_rol tbl;
    ELSE
      IF pIdAbm = 1
        THEN
          INSERT INTO tbl_rol(rol, descripcion) VALUES (pRol, pDescripcion);
      ELSE
        IF pIdAbm = 2
          THEN
            UPDATE tbl_rol set rol = pRol,descripcion = pDescripcion Where  id_rol = pIdRol;
            commit;
          ELSE 
          IF pIdAbm=3 THEN
              DELETE FROM tbl_rol WHERE tbl_rol.id_rol=pIdRol;
            END IF;
        END IF;
     END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRABMUsuario
--
CREATE PROCEDURE SPRABMUsuario(IN pIdAbm TINYINT, IN pId_usuario BIGINT (20), IN pUsuario VARCHAR(50), IN pContrasenia VARCHAR(100), IN pId_sujeto BIGINT(20), IN pActive CHAR(1))
BEGIN
IF pIdAbm = 0
      THEN 
       SELECT
        tbl.id_usuario,
        tbl.id_sujeto,
        viw.sujeto,
        tbl.usuario,
        tbl.contrasenia,
        tbl.active
      FROM
        viw_sujeto viw
          INNER JOIN tbl_usuario tbl
            ON viw.id_sujeto = tbl.id_sujeto;
      ELSE
       IF pIdAbm = 1
      THEN
      INSERT INTO tbl_usuario(usuario,contrasenia,id_sujeto,active) VALUES (pUsuario,pContrasenia,pId_sujeto,pActive);
      ELSE 
 IF pIdAbm=2
      THEN
      UPDATE tbl_usuario tbl set 
        tbl.usuario=pUsuario,
        tbl.contrasenia=pContrasenia,
        tbl.active=pActive
        WHERE id_usuario=pId_usuario;
      COMMIT;
      ELSE 
 IF pIdAbm = 3
      THEN
      DELETE FROM tbl_usuario WHERE id_usuario=pId_usuario;
      COMMIT;
      ELSE
  IF pIdAbm=4
    THEN
    SET pActive=0;
      UPDATE tbl_usuario tbl set tbl.active=0 WHERE tbl.id_usuario=pId_usuario;
    commit;
    END IF;
  END IF;
  END IF;
  END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRABMUsuarioRol
--
CREATE PROCEDURE SPRABMUsuarioRol(IN pIdAbm TINYINT, IN pIdUsuarioRol INT, IN pIdUsuario BIGINT, IN pIdRol INT)
BEGIN
 IF pIdAbm=1 THEN
    INSERT INTO tbl_usuario_rol(id_rol,id_usuario) values (pIdRol,pIdUsuario);
  ELSE
    IF pIdAbm=2 THEN
        DELETE FROM tbl_usuario_rol WHERE id_usuario_rol in (pIdUsuarioRol);
      END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRAPREstadoPlanTesis
--
CREATE PROCEDURE SPRAPREstadoPlanTesis(IN pIdPlanTesis BIGINT, IN pIdEstado INT)
BEGIN
  UPDATE tbl_plan_tesis tbl SET
    tbl.id_estado_plan_tesis=pIdEstado
WHERE tbl.id_plan_tesis=pIdPlanTesis;
END
$$

--
-- Definition for procedure SPRCNDTesis
--
CREATE PROCEDURE SPRCNDTesis()
BEGIN
SELECT
  viw.titulo,
  viw.alumno,
  viw.docente,
  viw.anio,
  viw.id_material_bibliografico,
  viw.id_docente,
  viw.id_alumno,
  viw.id_autor_interno,
  viw.id_tipo_autor_interno
FROM
  viw_material_bibliografico_interno_alumno viw
  WHERE viw.id_tipo_material_bibliografico=1;
END
$$

--
-- Definition for procedure SPRCNSAccion
--
CREATE PROCEDURE SPRCNSAccion(IN pIdCns INT, IN pInicio INT, IN pFinal INT)
BEGIN
declare pTotal int;
SET @inicio=pInicio;
SET @fin=pFinal;

IF pIdCns = 1 THEN
    set @pTotal=(select count(id_accion) from tbl_accion);
    PREPARE STMT FROM "SELECT id_accion, accion, ? as Total FROM tbl_accion LIMIT ?,?";
    EXECUTE STMT USING @pTotal,@inicio,@fin;
END IF;
END
$$

--
-- Definition for procedure SPRCNSAsesor
--
CREATE PROCEDURE SPRCNSAsesor()
BEGIN
 SELECT
  viw.id_docente,
  viw.id_sujeto,
  viw.Docente,
  viw.activo
FROM
  viw_docente viw
  WHERE viw.activo='1';
END
$$

--
-- Definition for procedure SPRCNSAutoresXTipoAutor
--
CREATE PROCEDURE SPRCNSAutoresXTipoAutor(IN pIdCns TINYINT)
BEGIN
  IF pIdCns=1 THEN 
    SELECT
      viw.id_alumno,
      viw.id_autor_interno,
      viw.alumno
    FROM
      viw_material_bibliografico_interno_alumno viw
    WHERE
      viw.id_tipo_autor_interno IN (4,5);
    ELSE IF pIdCns = 2 THEN -- FUNCIONADA PARA LISTAR TANTO A TESIST COMO TITULADOS
          SELECT
          tbl.id_autor_interno,
          tbl.id_alumno,
          viw.alumno,
          viw.id_facultad,
          viw.id_escuela
        FROM
          tbl_autor_interno  tbl
          INNER JOIN viw_alumno viw
            ON tbl.id_alumno = viw.id_alumno
          WHERE tbl.id_tipo_autor_interno IN (4,5);
          ELSE IF pIdCns=3 THEN -- FUNCIONA PARA LISTAR SOLO A TESISTA
                SELECT
                  tbl.id_autor_interno,
                  tbl.id_alumno,
                  viw.alumno,
                  viw.id_facultad,
                  viw.id_escuela
                FROM
                  tbl_autor_interno  tbl
                  INNER JOIN viw_alumno viw
                    ON tbl.id_alumno = viw.id_alumno
                  WHERE tbl.id_tipo_autor_interno =4;
            END IF;
       END IF;
    END IF;
END
$$

--
-- Definition for procedure SPRCNSComponenteAccion
--
CREATE PROCEDURE SPRCNSComponenteAccion(IN pIdCns TINYINT, IN pIdComponente INT, IN pLimit INT)
BEGIN
  IF pIdCns=1 THEN
SELECT
  tblc.id_componente,
  tblca.id_componente_accion,
  tblca.id_accion,
  tbla.accion
FROM
  tbl_componente_accion tblca
  INNER JOIN tbl_componente tblc
    ON tblca.id_componente = tblc.id_componente
   INNER JOIN sis_biblio.tbl_accion tbla
    ON tblca.id_accion = tbla.id_accion
  WHERE tblc.id_componente=pIdComponente;
    ELSE IF pIdCns=2 THEN
      SET @pLimit=pLimit;
      SET @pIdComponente=pIdComponente;
     PREPARE STMT FROM   'SELECT
  tblc.id_componente,
  tblca.id_componente_accion,
  tblca.id_accion,
  tbla.accion
FROM
  tbl_componente_accion tblca
  INNER JOIN tbl_componente tblc
    ON tblca.id_componente = tblc.id_componente
   INNER JOIN sis_biblio.tbl_accion tbla
    ON tblca.id_accion = tbla.id_accion
  WHERE tblc.id_componente=? ORDER BY tblca.id_componente_accion DESC LIMIT ?';
      EXECUTE STMT USING @pIdComponente,@pLimit;
      END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRCNSEscuela
--
CREATE PROCEDURE SPRCNSEscuela()
BEGIN
SELECT
  tbl.id_escuela,
  tbl.escuela
FROM
  tbl_escuela tbl
  WHERE tbl.estado=1;
END
$$

--
-- Definition for procedure SPRCNSFacultad
--
CREATE PROCEDURE SPRCNSFacultad()
BEGIN
SELECT
  tbl.id_facultad,
  tbl.facultad
FROM
  tbl_facultad tbl
  WHERE tbl.activo=1;
END
$$

--
-- Definition for procedure SPRCNSInformePractica
--
CREATE PROCEDURE SPRCNSInformePractica(IN pTipoCns TINYINT ,IN pIdTipoMaterial TINYINT, IN pIdAlumno BIGINT)
BEGIN
  IF pTipoCns=1 THEN
SELECT
  viw.id_material_bibliografico,
  viw.id_alumno,
  viw.alumno,
  viw.docente,
  viw.titulo,
  viw.introduccion,
  viw.objetivo,
  viw.resumen,
  viw.conclusion
FROM
  viw_material_bibliografico_interno_alumno viw
  WHERE viw.id_tipo_material_bibliografico=pIdTipoMaterial AND
  viw.id_alumno=pIdAlumno;
    END IF;
END
$$

--
-- Definition for procedure SPRCNSListar_rol_componente_accion
--
CREATE PROCEDURE SPRCNSListar_rol_componente_accion(IN pIdCns TINYINT, IN pIdRol INT(11), IN pLimit TINYINT)
BEGIN
IF pIdCns=1 THEN
SELECT 	`tbl_rol_componente_accion`.`id_rol_componente_accion`,
		`tbl_rol`.`id_rol`,
		`tbl_componente_accion`.`id_componente_accion`,
		`tbl_componente`.`componente`,
		`tbl_accion`.`accion` 
FROM tbl_rol_componente_accion

LEFT JOIN `sis_biblio`.`tbl_componente_accion` ON `tbl_rol_componente_accion`.`id_componente_accion` = `tbl_componente_accion`.`id_componente_accion` 
LEFT JOIN `sis_biblio`.`tbl_rol` ON `tbl_rol_componente_accion`.`id_rol` = `tbl_rol`.`id_rol` 
LEFT JOIN `sis_biblio`.`tbl_accion` ON `tbl_componente_accion`.`id_accion` = `tbl_accion`.`id_accion` 
LEFT JOIN `sis_biblio`.`tbl_componente` ON `tbl_componente_accion`.`id_componente` = `tbl_componente`.`id_componente` 
WHERE tbl_rol.id_rol = pIdRol;
  ELSE IF pIdCns=2 THEN
    set @Limit=pLimit;
    set @IdRol=pIdRol;
PREPARE STMT FROM 'SELECT 	`tbl_rol_componente_accion`.`id_rol_componente_accion`,
		`tbl_rol`.`id_rol`,
		`tbl_componente_accion`.`id_componente_accion`,
		`tbl_componente`.`componente`,
		`tbl_accion`.`accion` 
FROM tbl_rol_componente_accion

LEFT JOIN `sis_biblio`.`tbl_componente_accion` ON `tbl_rol_componente_accion`.`id_componente_accion` = `tbl_componente_accion`.`id_componente_accion` 
LEFT JOIN `sis_biblio`.`tbl_rol` ON `tbl_rol_componente_accion`.`id_rol` = `tbl_rol`.`id_rol` 
LEFT JOIN `sis_biblio`.`tbl_accion` ON `tbl_componente_accion`.`id_accion` = `tbl_accion`.`id_accion` 
LEFT JOIN `sis_biblio`.`tbl_componente` ON `tbl_componente_accion`.`id_componente` = `tbl_componente`.`id_componente` 
WHERE tbl_rol.id_rol=?
    ORDER BY tbl_rol_componente_accion.id_rol_componente_accion DESC LIMIT ?';
        EXECUTE STMT USING @IdRol,@Limit;
        END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRCNSListar_rol_usuario
--
CREATE PROCEDURE SPRCNSListar_rol_usuario(IN pIdCns TINYINT,IN pId_usuario BIGINT(20),IN pLimit TINYINT)
BEGIN
 IF pIdCns=1 THEN
SELECT
  tbl_usuario_rol.id_usuario_rol,
  tbl_usuario.id_usuario,
  tbl_rol.id_rol,
  tbl_rol.rol
FROM
  tbl_usuario_rol
  INNER JOIN tbl_rol
    ON tbl_usuario_rol.id_rol = tbl_rol.id_rol
  INNER JOIN tbl_usuario
    ON tbl_usuario_rol.id_usuario = tbl_usuario.id_usuario

   where tbl_usuario.id_usuario=pId_usuario;
  ELSE IF pIdCns=2 THEN
    set @Limit=pLimit;
    set @IdUsuario=pId_usuario;
PREPARE STMT FROM 'SELECT
  tbl_usuario_rol.id_usuario_rol,
  tbl_usuario.id_usuario,
  tbl_rol.id_rol,
  tbl_rol.rol
FROM
  tbl_usuario_rol
  INNER JOIN tbl_rol
    ON tbl_usuario_rol.id_rol = tbl_rol.id_rol
  INNER JOIN tbl_usuario
    ON tbl_usuario_rol.id_usuario = tbl_usuario.id_usuario

   where tbl_usuario.id_usuario=?
    ORDER BY tbl_usuario_rol.id_usuario_rol DESC LIMIT ?';
        EXECUTE STMT USING @IdUsuario,@Limit;
        END IF;
  END IF;
END
$$

--
-- Definition for procedure SPRCNSMaterialBibliograficoXAsesor
--
CREATE PROCEDURE SPRCNSMaterialBibliograficoXAsesor(IN pIdDocente BIGINT)
BEGIN
SELECT
  viw.id_material_bibliografico,
  viw.titulo,
  viw.introduccion,
  viw.objetivo,
  viw.resumen,
  viw.conclusion
FROM
  viw_material_bibliografico_interno_alumno viw
  WHERE viw.id_docente=pIdDocente
GROUP BY viw.id_material_bibliografico;
END
$$

--
-- Definition for procedure SPRCNSPlanTesis
--
CREATE PROCEDURE SPRCNSPlanTesis(IN pIdCns TINYINT, IN pIdPlanTesis INT)
BEGIN
  -- El listado de las tesis que estan en proceso
  IF pIdCns=1 THEN
    SELECT
      tbl.id_plan_tesis as 'id_plan_tesis',
      viwd.id_docente as 'id_docente',
      viwa.id_alumno as 'id_alumno',
      viwa.id_facultad as 'id_facultad',
      viwa.alumno as 'tesista', 
      viwa.escuela_abreviatura AS 'abreaviatura_escuela',
      tbl.titulo as 'titulo',
      viwd.docente as 'asesor'
    FROM
      viw_alumno viwa
      INNER JOIN tbl_plan_tesis tbl
        ON viwa.id_alumno = tbl.id_alumno
      INNER JOIN viw_docente viwd
        ON viwd.id_docente = tbl.id_docente
    WHERE tbl.id_estado_plan_tesis=1
    ORDER BY tbl.id_plan_tesis desc;
    -- Busqueda de una tesis determinada
    ELSE IF pIdCns=2 THEN
      SELECT
        tbl.id_plan_tesis as 'id_plan_tesis',
        viwd.id_docente as 'id_docente',
        viwa.id_alumno as 'id_alumno',
        viwa.id_facultad as 'id_facultad',
        viwa.alumno as 'tesista', 
        viwa.escuela_abreviatura AS 'abreaviatura_escuela',
        tbl.titulo as 'titulo',
        viwd.docente as 'asesor',
        tbl.introduccion as 'introduccion',
        tbl.objetivo as 'objetivo',
        tbl.resumen as 'resumen',
        tbl.conclusion as 'conclusion'
      FROM
        viw_alumno viwa
        INNER JOIN tbl_plan_tesis tbl
          ON viwa.id_alumno = tbl.id_alumno
        INNER JOIN viw_docente viwd
          ON viwd.id_docente = tbl.id_docente
      WHERE tbl.id_estado_plan_tesis!=2
        and tbl.id_plan_tesis=pIdPlanTesis;
       END IF;
   END IF;
END
$$

--
-- Definition for procedure SPRCNSSujeto
--
CREATE PROCEDURE SPRCNSSujeto()
BEGIN
SELECT
  viw.id_sujeto,
  viw.sujeto
FROM
  viw_sujeto viw;
END
$$

--
-- Definition for procedure SPRINSMaterialBibliografico
--
CREATE PROCEDURE SPRINSMaterialBibliografico(IN pCodigoMaterialBibliografico VARCHAR(40), IN pTitulo VARCHAR(300), IN pIntroduccion TEXT, IN pObjetivo TEXT, IN pResumen TEXT, IN pConclusion TEXT, IN pAnio YEAR, IN pPortada VARCHAR(200), IN pNumeroPagina SMALLINT, IN pEditorial VARCHAR(100), IN pVolumen INT, IN pTomo VARCHAR(3), IN pContenido VARCHAR(100), IN pidTipoMaterialBibliografico TINYINT, IN pIdTematica INT, IN pActivo CHAR(1))
BEGIN
  INSERT INTO tbl_material_bibliografico (codigo_material_bibliografico,titulo,introduccion,objetivo,resumen,conclusion,anio,portada,numero_pagina,editorial,volumen,tomo,contenido,id_tipo_material_bibliografico,id_tematica,activo)
     VALUES (pCodigoMaterialBibliografico,pTitulo,pIntroduccion,pObjetivo,pResumen,pConclusion,pAnio,pPortada,pNumeroPagina,pEditorial,pVolumen,pTomo,pContenido,pidTipoMaterialBibliografico,pIdTematica,pActivo);
  COMMIT;
END
$$

--
-- Definition for procedure SPRINSSolicitudConstancia
--
CREATE PROCEDURE SPRINSSolicitudConstancia(IN pTitulo VARCHAR(300),IN pIntroduccion text,IN pObjetivo text,IN pResumen TEXT, IN pConclusion TEXT,IN pCorreo VARCHAR(50),IN pActivo CHAR(1),IN pIdSujeto BIGINT,IN pIdDocente BIGINT)
BEGIN
     SET @pidAlumno = (SELECT tbl.id_alumno FROM  tbl_alumno tbl  WHERE tbl.id_sujeto=pIdSujeto);
    INSERT INTO tbl_plan_tesis(titulo,introduccion,objetivo,resumen,conclusion,activo,correo,id_alumno,id_docente,id_estado_plan_tesis)
       VALUES (pTitulo,pIntroduccion,pObjetivo,pResumen,pConclusion,1,pCorreo,@pidAlumno,pIdDocente,1);
END
$$

--
-- Definition for procedure SPRINSTesis
--
CREATE PROCEDURE SPRINSTesis(IN pIdAutorInterno BIGINT, IN pIdDocente BIGINT,IN pTitulo VARCHAR(300),IN pIntroduccion TEXT,IN pObjetivo TEXT,IN pResumen TEXT,IN pConclusion TEXT,IN pAnio YEAR,IN pNumeroPagina SMALLINT,IN pCodigoMaterialBibliografico VARCHAR(40))
BEGIN
CALL SPRINSMaterialBibliografico(pCodigoMaterialBibliografico, pTitulo,pIntroduccion ,pObjetivo ,pResumen ,pConclusion ,pAnio , '',pNumeroPagina , '', null, '', '', 1, null, 1);
set @pIdMaterialBibliografico:=(SELECT LAST_INSERT_ID());
 -- CALL SPRABMAutorInterno(2,5,pIdAutorInterno,0);
INSERT INTO tbl_autor_interno_material_bibliografico(id_autor_interno,id_material_bibliografico,id_docente) 
  VALUES (pIdAutorInterno,@pIdMaterialBibliografico,pIdDocente);
END
$$

--
-- Definition for procedure SPRUPDTesis
--
CREATE PROCEDURE SPRUPDTesis(IN pIdMaterialBibliografico BIGINT, IN pIntroduccion TEXT, IN pObjetivo TEXT, IN pResumen TEXT, IN pConclusion TEXT)
BEGIN
UPDATE tbl_material_bibliografico tbl SET
tbl.introduccion=pIntroduccion,
tbl.objetivo=pObjetivo,
tbl.resumen=pResumen,
tbl.conclusion=pConclusion
  WHERE tbl.id_material_bibliografico=pIdMaterialBibliografico;
END
$$

DELIMITER ;

--
-- Definition for view viw_docente
--
CREATE OR REPLACE 
VIEW viw_docente
AS
	select `tbl_d`.`id_docente` AS `id_docente`,`tbl_d`.`codigo_docente` AS `codigo_docente`,`tbl_d`.`codigo_personal` AS `codigo_personal`,`tbl_s`.`id_sujeto` AS `id_sujeto`,`tbl_s`.`fecha_registro` AS `fecha_registro`,concat(ifnull(`tbl_s`.`apellido_paterno`,''),' ',ifnull(`tbl_s`.`apellido_materno`,''),', ',ifnull(`tbl_s`.`primer_nombre`,''),' ',ifnull(`tbl_s`.`segundo_nombre`,'')) AS `docente`,`tbl_s`.`fecha_nacimiento` AS `fecha_nacimiento`,`tbl_s`.`dni` AS `dni`,`tbl_s`.`direccion` AS `direccion`,`tbl_s`.`estado_civil` AS `estado_civil`,`tbl_s`.`sexo` AS `sexo`,`tbl_s`.`telefono_fijo` AS `telefono_fijo`,`tbl_s`.`telefono_movil` AS `telefono_movil`,`tbl_s`.`email_institucional` AS `email_institucional`,`tbl_s`.`email_personal` AS `email_personal`,`tbl_s`.`activo` AS `activo` from (`tbl_docente` `tbl_d` join `tbl_sujeto` `tbl_s` on((`tbl_d`.`id_sujeto` = `tbl_s`.`id_sujeto`)));

--
-- Definition for view viw_sujeto
--
CREATE OR REPLACE 
VIEW viw_sujeto
AS
	select `tbl`.`id_sujeto` AS `id_sujeto`,concat(ifnull(`tbl`.`apellido_paterno`,''),' ',ifnull(`tbl`.`apellido_materno`,''),', ',ifnull(`tbl`.`primer_nombre`,''),' ',ifnull(`tbl`.`segundo_nombre`,'')) AS `sujeto`,`tbl`.`dni` AS `dni`,`tbl`.`direccion` AS `direccion`,`tbl`.`email_institucional` AS `email_institucional`,`tbl`.`email_personal` AS `email_personal`,`tbl`.`activo` AS `activo` from `tbl_sujeto` `tbl` where (`tbl`.`activo` = 1);

--
-- Definition for view viw_alumno
--
CREATE OR REPLACE 
VIEW viw_alumno
AS
	select `viw`.`id_sujeto` AS `id_sujeto`,`tbla`.`id_alumno` AS `id_alumno`,`tblf`.`id_facultad` AS `id_facultad`,`tble`.`id_escuela` AS `id_escuela`,`viw`.`sujeto` AS `alumno`,`tbla`.`numero_carnet` AS `numero_carnet`,`tblf`.`facultad` AS `facultad`,`tblf`.`abreviatura_facultad` AS `abreviatura_facultad`,`tble`.`escuela` AS `escuela`,`tble`.`escuela_abreviatura` AS `escuela_abreviatura`,`viw`.`email_institucional` AS `email_institucional`,`viw`.`email_personal` AS `email_personal` from (((`tbl_escuela` `tble` join `tbl_facultad` `tblf` on((`tble`.`id_facultad` = `tblf`.`id_facultad`))) join `tbl_alumno` `tbla` on((`tbla`.`id_escuela` = `tble`.`id_escuela`))) join `viw_sujeto` `viw` on((`tbla`.`id_sujeto` = `viw`.`id_sujeto`)));

--
-- Definition for view viw_usuario
--
CREATE OR REPLACE 
VIEW viw_usuario
AS
	select `tbl_usuario`.`id_usuario` AS `id_usuario`,`tbl_usuario`.`id_sujeto` AS `id_sujeto`,`viw_sujeto`.`sujeto` AS `sujeto`,`tbl_usuario`.`usuario` AS `usuario`,`tbl_usuario`.`contrasenia` AS `contrasenia`,`tbl_usuario`.`active` AS `active` from (`viw_sujeto` join `tbl_usuario` on((`viw_sujeto`.`id_sujeto` = `tbl_usuario`.`id_sujeto`)));

--
-- Definition for view viw_material_bibliografico_interno_alumno
--
CREATE OR REPLACE 
VIEW viw_material_bibliografico_interno_alumno
AS
	select `tbl1`.`id_material_bibliografico` AS `id_material_bibliografico`,`viw2`.`id_docente` AS `id_docente`,`viw1`.`id_alumno` AS `id_alumno`,`tbl2`.`id_autor_interno` AS `id_autor_interno`,`tbl2`.`id_tipo_autor_interno` AS `id_tipo_autor_interno`,`viw1`.`alumno` AS `alumno`,`viw2`.`docente` AS `docente`,`viw1`.`id_facultad` AS `id_facultad`,`viw1`.`id_escuela` AS `id_escuela`,`viw1`.`facultad` AS `facultad`,`viw1`.`abreviatura_facultad` AS `abreviatura_facultad`,`viw1`.`escuela` AS `escuela`,`viw1`.`escuela_abreviatura` AS `escuela_abreviatura`,`tbl3`.`titulo` AS `titulo`,`tbl3`.`introduccion` AS `introduccion`,`tbl3`.`objetivo` AS `objetivo`,`tbl3`.`resumen` AS `resumen`,`tbl3`.`conclusion` AS `conclusion`,`tbl3`.`anio` AS `anio`,`tbl3`.`id_tematica` AS `id_tematica`,`tbl3`.`id_tipo_material_bibliografico` AS `id_tipo_material_bibliografico`,`tbl3`.`activo` AS `activo` from ((((`tbl_autor_interno_material_bibliografico` `tbl1` join `tbl_autor_interno` `tbl2` on((`tbl1`.`id_autor_interno` = `tbl2`.`id_autor_interno`))) join `tbl_material_bibliografico` `tbl3` on((`tbl1`.`id_material_bibliografico` = `tbl3`.`id_material_bibliografico`))) join `viw_alumno` `viw1` on((`viw1`.`id_alumno` = `tbl2`.`id_alumno`))) join `viw_docente` `viw2` on((`viw2`.`id_docente` = `tbl1`.`id_docente`)));

--
-- Definition for view viw_tesis
--
CREATE OR REPLACE 
VIEW viw_tesis
AS
	select `tbl1`.`id_material_bibliografico` AS `id_material_bibliografico`,`viw2`.`id_docente` AS `id_docente`,`viw1`.`id_alumno` AS `id_alumno`,`tbl2`.`id_autor_interno` AS `id_autor_interno`,`tbl2`.`id_tipo_autor_interno` AS `id_tipo_autor_interno`,`viw1`.`alumno` AS `alumno`,`viw2`.`docente` AS `docente`,`viw1`.`facultad` AS `facultad`,`tbl3`.`titulo` AS `titulo`,`tbl3`.`anio` AS `anio`,`tbl3`.`introduccion` AS `introduccion`,`tbl3`.`objetivo` AS `objetivo`,`tbl3`.`resumen` AS `resumen`,`tbl3`.`conclusion` AS `conclusion` from ((((`tbl_autor_interno_material_bibliografico` `tbl1` join `tbl_autor_interno` `tbl2` on((`tbl1`.`id_autor_interno` = `tbl2`.`id_autor_interno`))) join `tbl_material_bibliografico` `tbl3` on((`tbl1`.`id_material_bibliografico` = `tbl3`.`id_material_bibliografico`))) join `viw_alumno` `viw1` on((`viw1`.`id_alumno` = `tbl2`.`id_alumno`))) join `viw_docente` `viw2` on((`viw2`.`id_docente` = `tbl1`.`id_docente`))) where (`tbl3`.`id_tipo_material_bibliografico` = 1);

-- 
-- Dumping data for table tbl_accion
--
INSERT INTO tbl_accion VALUES 
  (1, 'Insertar'),
  (3, 'Modifica'),
  (4, 'Eliminar'),
  (5, 'Consultar'),
  (6, 'Buscar');

-- 
-- Dumping data for table tbl_autor_externo
--
-- Table does not contain any data (it is empty)

-- 
-- Dumping data for table tbl_componente
--
INSERT INTO tbl_componente VALUES 
  (77, 'Módulo de Acción', ''),
  (84, 'Módulo de Componente', ''),
  (86, 'Módulo de Rol', ''),
  (87, 'Módulo de Usuario', ''),
  (89, 'Módulo Solicitar Constancia', ''),
  (90, 'Módulo Comparación de Tesis', ''),
  (91, 'Módulo de Asignación de Roles', ''),
  (92, 'Módulo de Asignación', '');

-- 
-- Dumping data for table tbl_estado_plan_tesis
--
INSERT INTO tbl_estado_plan_tesis VALUES 
  (1, 'Proceso', 'amarillo', '1'),
  (2, 'Rechazado', 'rojo', '1'),
  (3, 'Aprobado', 'verde', '1');

-- 
-- Dumping data for table tbl_facultad
--
INSERT INTO tbl_facultad VALUES 
  (1, '01', 'INGENIERIA', 'FI', '1'),
  (2, '02', 'MEDICINA', 'FM', '1'),
  (3, '03', 'EDUCACION', 'FE', '1'),
  (4, '04', 'CONTABILIDAD', 'FC', '0');

-- 
-- Dumping data for table tbl_rol
--
INSERT INTO tbl_rol VALUES 
  (63, 'Administrador', ''),
  (64, 'Tester', ''),
  (65, 'Jefe de Biblioteca Central', ''),
  (66, 'Asistenta de Biblioteca', ''),
  (67, 'Visitante', '');

-- 
-- Dumping data for table tbl_sujeto
--
INSERT INTO tbl_sujeto VALUES 
  (1, '2013-06-24', 'Morales', 'Flores', 'Victor', 'Angel', '1994-06-28', '76771971', 'Calle Bellavista', 'S', 'M', '1234567', '123456', '', NULL, '1'),
  (2, '2013-06-10', 'Nicho', 'Diaz', 'Cesar', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (3, '2013-06-12', 'Valladares', 'Loza', 'Deyvis', 'J', '2013-06-12', '12345678', 'al lado', 'S', 'M', '23', NULL, NULL, NULL, '1'),
  (4, '2013-06-21', 'Gonzales', 'Angulo', 'Karina', NULL, NULL, NULL, NULL, 'S', 'F', NULL, NULL, NULL, NULL, '1'),
  (5, '2013-06-04', 'Grados', 'Manrique', 'Kelly', NULL, NULL, NULL, NULL, 'S', 'F', NULL, NULL, NULL, NULL, '1'),
  (6, '2013-06-12', 'Vicente', 'Rojas', 'Diego', NULL, NULL, NULL, NULL, 'S', 'M', NULL, NULL, NULL, NULL, '1'),
  (7, '2013-07-01', 'Portilla', 'Villavicencio', 'Nadine', '', '2013-07-01', '9876543', NULL, 'S', 'F', '7654345', NULL, NULL, NULL, '1'),
  (8, '2013-07-01', 'Castillo', 'Montoya', 'Nataly', NULL, '2013-07-09', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (9, '2013-07-02', 'Ruiz', 'Huaman', 'Leandro', NULL, '2013-07-02', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (10, '2013-07-04', 'Valverde', 'Flores', 'Arturo', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (11, '2013-07-09', 'Figueroa', 'Damian', 'Marlene', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (12, '2013-07-02', 'Lino', 'Robles', 'Lino', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1'),
  (13, '2013-07-03', 'Osorio', 'Osorio', 'Alberto', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1');

-- 
-- Dumping data for table tbl_tematica
--
INSERT INTO tbl_tematica VALUES 
  (1, 'Ciencias', NULL, '1'),
  (2, 'Ingeniería', NULL, '1'),
  (3, 'Medicina', NULL, '1'),
  (4, 'Contabilidad', NULL, '1'),
  (5, 'Matemática', NULL, '1'),
  (6, 'Física', NULL, '1');

-- 
-- Dumping data for table tbl_tipo_autor_interno
--
INSERT INTO tbl_tipo_autor_interno VALUES 
  (1, 'Alumno', NULL, '1'),
  (2, 'Egresado', NULL, '0'),
  (3, 'Bachiller', NULL, '1'),
  (4, 'Tesista', NULL, '1'),
  (5, 'Titulado', NULL, '1');

-- 
-- Dumping data for table tbl_tipo_material_bibliografico
--
INSERT INTO tbl_tipo_material_bibliografico VALUES 
  (1, 'Tesis', NULL, '1'),
  (2, 'Monografía', NULL, '1'),
  (3, 'Informe de Práctica', NULL, '1');

-- 
-- Dumping data for table tbl_componente_accion
--
INSERT INTO tbl_componente_accion VALUES 
  (1, 1, 77),
  (2, 3, 77),
  (4, 1, 84),
  (5, 5, 84);

-- 
-- Dumping data for table tbl_docente
--
INSERT INTO tbl_docente VALUES 
  (1, 1234, '1234', '1', NULL, 1),
  (3, 6654, NULL, '2', NULL, 2),
  (4, 2312, NULL, '1', NULL, 3),
  (5, 1234, NULL, '1', NULL, 12),
  (6, 2345, NULL, '1', NULL, 13);

-- 
-- Dumping data for table tbl_escuela
--
INSERT INTO tbl_escuela VALUES 
  (1, '01', 'INGENIERIA DE SISTEMAS', 'EAPIS', '1', 1),
  (2, '02', 'INGENIERIA INFORMATICA', 'EAPII', '0', 1),
  (3, '03', 'INGENIERIA INDUSTRIAL', 'EAPII', '1', 1),
  (4, '04', 'MEDICINA', 'EAPM', '1', 1),
  (5, '05', 'ENFERMERIA', 'EAPE', '1', 1);

-- 
-- Dumping data for table tbl_material_bibliografico
--
INSERT INTO tbl_material_bibliografico VALUES 
  (1, '0987', 'TESIS1', 'INTRODUCCION1', 'OBJETIVO2', 'RESUMEN3', 'CONCLUSION4', 2013, NULL, 100, NULL, NULL, NULL, NULL, 1, 2, '1'),
  (3, '1234', 'TESSI2', 'INTRO', 'OBJ', 'RESUM', 'CONL', 2012, NULL, 12, NULL, NULL, NULL, NULL, 1, 2, '1'),
  (4, '2344', 'INFORM', 'DE PRACTICA', 'PRIMERA ', 'QUE SE', 'PONE', 2012, NULL, 200, NULL, NULL, NULL, NULL, 3, 2, '1'),
  (5, '4567', 'TESIS3', 'INTOTESIS', 'OBJTESIS', 'RESUMTESIS', 'CONCLUSTESIS', 2000, NULL, NULL, NULL, NULL, NULL, NULL, 1, 2, '1'),
  (6, '1235', 'TESIS200', 'INTRODUCCION 200', 'OBJETIVO 200', 'RESUMEN200', 'CONCLUSION200', 2020, NULL, 12, NULL, NULL, NULL, NULL, 1, 2, '1'),
  (7, '12345', 'TESIS SPR', 'INTRO SPR', 'OBJ SPR', 'RESU SPR', 'CONCLU SPR', 2100, '', 1200, '', NULL, '', '', 1, NULL, '1'),
  (8, '0', 'TESIS WEB', 'WEB INTRO TESIS', 'OBJT INTRO', 'RESUM INTRO', 'CONCLUS WEB', 2010, '', NULL, '', NULL, '', '', 1, NULL, '1'),
  (9, '0', 'TESIS WEB2', 'CAMBIO', 'CAMBIO', 'CAMBIO', 'CAMBIO', 2010, '', NULL, '', NULL, '', '', 1, NULL, '1'),
  (10, '0', 'cesar', 'INTRODUCCIÓN CARÑO', 'INTRODUCCIÓN CARÑO', 'INTRODUCCIÓN CARÑO', 'INTRODUCCIÓN CARÑO', 2010, '', NULL, '', NULL, '', '', 1, NULL, '1'),
  (11, '0', 'SEÑOR DE LOS MILAGROS', 'INTROOO', 'OBJT', 'RESUMEN', 'CONCLU', 2000, '', NULL, '', NULL, '', '', 1, NULL, '1');

-- 
-- Dumping data for table tbl_usuario
--
INSERT INTO tbl_usuario VALUES 
  (24, 'admin', '123', 1, '1'),
  (67, 'cesarcnd', 'cesarnicho', 2, '1'),
  (68, 'user', 'user', 3, '1');

-- 
-- Dumping data for table tbl_alumno
--
INSERT INTO tbl_alumno VALUES 
  (1, '0332101030', 1, 1, 1),
  (2, '0332101028', 1, 2, 1),
  (3, '0332101036', 1, 3, 1),
  (4, '0332101029', 2, 4, 1),
  (5, '0332090210', 2, 5, 1),
  (6, '0332090211', 3, 6, 1),
  (7, '0332101012', 1, 7, 1),
  (8, '0332101018', 1, 8, 1),
  (9, '0332101019', 1, 9, 1),
  (10, '0332101045', 1, 10, 1);

-- 
-- Dumping data for table tbl_autor_externo_material_bibliografico
--
-- Table does not contain any data (it is empty)

-- 
-- Dumping data for table tbl_material_bibliografico_docente
--
-- Table does not contain any data (it is empty)

-- 
-- Dumping data for table tbl_rol_componente_accion
--
INSERT INTO tbl_rol_componente_accion VALUES 
  (1, 63, 1),
  (2, 63, 2),
  (3, 63, 4),
  (4, 63, 5);

-- 
-- Dumping data for table tbl_usuario_rol
--
INSERT INTO tbl_usuario_rol VALUES 
  (3, 63, 67),
  (39, 63, 24),
  (111, 66, 24),
  (112, 67, 24),
  (115, 64, 24);

-- 
-- Dumping data for table tbl_autor_interno
--
INSERT INTO tbl_autor_interno VALUES 
  (1, 1, 5),
  (2, 3, 6),
  (3, 3, 2),
  (4, 3, 3),
  (5, 4, 1),
  (6, 5, 4),
  (7, 5, 7),
  (8, 5, 8),
  (9, 5, 9),
  (10, 5, 10);

-- 
-- Dumping data for table tbl_plan_tesis
--
INSERT INTO tbl_plan_tesis VALUES 
  (2, 'MONOGRAFIA1', 'INTRO1', 'OBJETIVO1', 'RESUMEN1', 'CONCLUSION1', '1', NULL, '0332101028@injfsc.edu.pe', 1, 1, 2),
  (3, 'MONOGRAFIA2', 'INTRO2', 'OBJETIVO2', 'RESUMEN2', 'CONCLUSION2', '1', NULL, '0332101029@injfsc.edu.pe', 2, 3, 2),
  (4, 'MONOGRAFIA3', 'INTRO3', 'OBJETIVO3', 'RESUMEN3', 'CONCLUSION3', '1', NULL, '0332101030@injfsc.edu.pe', 3, 3, 2),
  (5, 'MONOGRAFIA4', 'INTRO4', 'OBJETIVO4', 'RESUMEN4', 'CONCLUSION4', '1', NULL, '0332101031@injfsc.edu.pe', 4, 3, 2),
  (28, 'MONOGRAFIA5', 'INTRO5', 'OBJETIVO5', 'RESUMEN5', 'CONCLUSION5', '1', NULL, '0332101032@injfsc.edu.pe', 1, 4, 1),
  (29, 'MONOGRAFIA6', 'INTRO6', 'OBJETIVO6', 'RESUMEN6', 'CONCLUSION6', '1', NULL, '0332101034@injfsc.edu.pe', 3, 4, 1),
  (30, 'MONOGRAFIA7', 'INTRO7', 'OBJETIVO7', 'RESUMEN7', 'CONCLUSION7', '1', NULL, '0332101033@injfsc.edu.pe', 2, 4, 1),
  (31, 'MONOGRAFIA8', 'INTRO8', 'OBJETIVO8', 'RESUMEN8', 'CONCLUSION8', '1', NULL, '0332101035@injfsc.edu.pe', 4, 3, 2),
  (32, 'MONOGRAFIA9', 'INTRO9', 'OBJETIVO9', 'RESUMEN9', 'CONCLUSION9', '1', NULL, '0332101036@injfsc.edu.pe', 4, 3, 1),
  (33, 'TÉSIS NUMERO 100', 'INTRODUCCIÓN 100', 'OBJETIVO 100', 'RESUMEN 100', 'CONCLUSIÓN 100', '1', NULL, '0332101040@unjfsc.edu.pe', 1, 3, 1),
  (34, 'TÉSIS200', 'INTRO200', 'OBJETIVO200', 'RESUMEN200', 'CONCLUSION200', '1', NULL, 'cesar@hotmail.com', 1, 4, 1);

-- 
-- Dumping data for table tbl_autor_interno_material_bibliografico
--
INSERT INTO tbl_autor_interno_material_bibliografico VALUES 
  (1, 1, 1, 3),
  (2, 2, 1, 4),
  (3, 3, 4, 4),
  (4, 4, 5, 3),
  (5, 5, 6, 1),
  (6, 5, 7, 5),
  (7, 7, 8, 3),
  (8, 9, 9, 3),
  (9, 8, 10, 1),
  (10, 8, 11, 3);

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;